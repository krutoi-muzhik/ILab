#include <stdio.h>
#include <stdlib.h>

typedef int Data;
const int extra_capacity = 10;
const Data CANARY_1 = 113;
const Data CANARY_2 = 217;
const Data CANARY_3 = 319;
const Data CANARY_4 = 479;
const Data POISON = -173;

struct Stack {
    Data canary_1;
    int size;
    int capacity;
    Data* a;
    Data canary_2;
};


struct Stack* stack_construct (int capacity) {
    struct Stack * stk = (struct Stack *) calloc (1, sizeof (struct Stack *));
    stk->canary_1 = CANARY_1;
    stk->a = (Data) calloc (capacity, sizeof(Data));
    stk->capacity = capacity;
    stk->size = -1;
    *(stk->a) = CANARY_3;
    *(stk->a + (stk->capacity - 1)* sizeof (Data)) = CANARY_4;
    return stk;
}


void stack_reconstruct (struct Stack* stk) {
    stk->capacity += extra_capacity;
    Data* swap = (Data*) calloc (stk->capacity, sizeof (Data));
    int i = 0;
    for (i = 0; i < stk->size; i++) {
        swap[i] = stk->a[i];
    }
    free (stk->a);
    stk->a = swap;
    *(stk->a + (stk->capacity - 1)* sizeof (Data)) = CANARY_2;
}


void stack_deconstruct (struct Stack* stk) {
    free (stk->a);
    free (stk);
    return;
}


int stack_is_ok (struct Stack* stk) {
    if (stk->canary_1) && *(stk->a + (stk->capacity - 1)* sizeof (Data)) = CANARY_2 {
        return 1;
    }

}


bool stack_is_empty (struct Stack* stk) {
    return (stk->size == -1);
}


bool stack_is_full (struct Stack* stk) {
    return (stk->size == stk->capacity - 1);
}


void stack_push (struct Stack* stk, Data x)
{
    if (stack_is_full (stk)) {
        stack_reconstruct (stk);
        stk->a[++(stk->size)] = x;

    }    else {
        stk->a[++(stk->size)] = x;
    }
    return;
}


Data stack_pop (struct Stack* stk) {
    if (stack_is_empty (stk)) {
        printf ("Stk is empty");
        return 0;
    }
    else {
        return stk->a[stk->size--];
    }
}


Data stack_get (struct Stack* stk) {
    return stk->a[stk->size];
}


void stack_print (struct Stack* stk) {
    if (stack_is_empty (stk))
    {
        printf ("Stk is empty\n");
        return;
    }
    else {
        int i;
        for (i = 0; i < stk->size + 1; i++) {
            printf ("%d ", stk->a[i]);
        }
        printf ("\n");
        return;
    }
}


void stack_clear (struct Stack* stk) {
    stk->size = 0;
    free (stk->a);
    return;
}

